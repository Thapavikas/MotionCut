class Task:
    def __init__(self, description, due_date=None, priority=None):
        self.description = description
        self.due_date = due_date
        self.priority = priority
        self.completed = False

class ToDoList:
    def __init__(self):
        self.tasks = []
        self.completed_tasks = []

    def add_task(self, task):
        self.tasks.append(task)
        print(f"Task '{task.description}' added to the to-do list.")

    def display_tasks(self):
        print("\nTo-Do List:")
        if not self.tasks:
            print("No tasks.")
        else:
            for index, task in enumerate(self.tasks, start=1):
                print(f"{index}. {task.description} - Due: {task.due_date} - Priority: {task.priority}")

        print("\nCompleted Tasks:")
        if not self.completed_tasks:
            print("No completed tasks.")
        else:
            for index, task in enumerate(self.completed_tasks, start=1):
                print(f"{index}. {task.description} - Due: {task.due_date} - Priority: {task.priority}")

    def mark_task_as_completed(self, task_number):
        if 1 <= task_number <= len(self.tasks):
            completed_task = self.tasks.pop(task_number - 1)
            completed_task.completed = True
            self.completed_tasks.append(completed_task)
            print(f"Task '{completed_task.description}' Marked as completed.")
        else:
            print("Invalid task number.")

    def update_task(self, task_number, description=None, due_date=None, priority=None):
        if 1 <= task_number <= len(self.tasks):
            task = self.tasks[task_number - 1]
            task.description = description if description is not None else task.description
            task.due_date = due_date if due_date is not None else task.due_date
            task.priority = priority if priority is not None else task.priority
            print(f"Task '{task.description}' updated.")
        else:
            print("Invalid task number.")

    def remove_task(self, task_number):
        if 1 <= task_number <= len(self.tasks):
            removed_task = self.tasks.pop(task_number - 1)
            print(f"Task '{removed_task.description}' removed from the to-do list.")
        else:
            print("Invalid task number.")

def main():
    todo_list = ToDoList()

    while True:
        print("\n1. Add Task")
        print("2. Display Tasks")
        print("3. Mark Task as Completed")
        print("4. Update Task")
        print("5. Remove Task")
        print("6. Quit")

        choice = input("Enter your choice (1-6): ")

        if choice == '1':
            description = input("Enter task description: ")
            due_date = input("Enter due date (optional): ")
            priority = input("Enter priority (optional): ")
            new_task = Task(description, due_date, priority)
            todo_list.add_task(new_task)

        elif choice == '2':
            todo_list.display_tasks()

        elif choice == '3':
            todo_list.display_tasks()
            task_number = int(input("Enter the task number to mark as completed: "))
            todo_list.mark_task_as_completed(task_number)

        elif choice == '4':
            todo_list.display_tasks()
            task_number = int(input("Enter the task number to update: "))
            description = input("Enter new description (press Enter to keep the current one): ")
            due_date = input("Enter new due date (press Enter to keep the current one): ")
            priority = input("Enter new priority (press Enter to keep the current one): ")
            todo_list.update_task(task_number, description, due_date, priority)

        elif choice == '5':
            todo_list.display_tasks()
            task_number = int(input("Enter the task number to remove: "))
            todo_list.remove_task(task_number)

        elif choice == '6':
            print("Exiting the to-do list program. Goodbye!")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 6.")


if __name__ == "__main__":
    main()
